<section id="command-cascade">
    <title>CASCADA</title>
<indexterm><primary>CASCADA</primary></indexterm>
<indexterm><primary>CASCADE</primary></indexterm>

<variablelist>

<varlistentry><term>Sinopsis</term>
<listitem>
<synopsis><command>CASCADA</command> <parameter>prueba_de_terminar</parameter> <parameter>plantilla</parameter> <parameter>valor_inicial</parameter>
(<command>CASCADA</command> <parameter>prueba_de_terminar</parameter> <parameter>plantilla1</parameter> <parameter>valor_inicial1</parameter> <parameter>plantilla2</parameter> <parameter>valor_inicial2</parameter> <parameter>...</parameter>)
(<command>CASCADA</command> <parameter>prueba_de_terminar</parameter> <parameter>plantilla1</parameter> <parameter>valor_inicial1</parameter> <parameter>plantilla2</parameter> <parameter>valor_inicial2</parameter> <parameter>...</parameter> <parameter>plantilla_final</parameter>)
<command>CASCADE</command> <parameter>prueba_de_terminar</parameter> <parameter>plantilla</parameter> <parameter>valor_inicial</parameter>
(<command>CASCADE</command> <parameter>prueba_de_terminar</parameter> <parameter>plantilla1</parameter> <parameter>valor_inicial1</parameter> <parameter>plantilla2</parameter> <parameter>valor_inicial2</parameter> <parameter>...</parameter>)
(<command>CASCADE</command> <parameter>prueba_de_terminar</parameter> <parameter>plantilla1</parameter> <parameter>valor_inicial1</parameter> <parameter>plantilla2</parameter> <parameter>valor_inicial2</parameter> <parameter>...</parameter> <parameter>plantilla_final</parameter>)</synopsis>
</listitem>
</varlistentry>


<varlistentry><term>Descripción</term>
<listitem>
<para>
Devuelve el resultado de aplicar una plantilla (o varias plantillas, ve a la sección titulada <link linkend="template-based-iteration">Iteración de Plantilla</link>) repetidamente, con el valor dado llenando la ranura por la primera aplicación y el resultado de cada aplicación llenando la ranura por la aplicación siguiente.
</para>

<para>
En el caso más sencillo, CASCADA toma tres argumentos.
El argumento <parameter>plantilla</parameter> es una plantilla de una sola ranura.
Se evalúa esta plantilla algún número de veces (tal vez cero).
Por la primera evaluación, se llena la ranura con el argumento <parameter>valor_inicial</parameter>; por las siguientes evaluaciones se llena la ranura con el resultado de la evaluación previa.
El argumento <parameter>prueba_de_terminar</parameter> determina el número de evaluaciones.
Este argumento puede ser un número no negativo, en cuyo caso se evalúa la plantilla aquel número de veces.
También, <parameter>prueba_de_terminar</parameter> puede ser un predicado, en cuyo caso se lo evalúa repetidamente (con el mismo argumento que se usa para <parameter>plantilla</parameter>) y las evaluaciones de CASCADA continúa mientras que <parameter>prueba_de_terminar</parameter> se evalúa a FALSO.
(En otras palabras, la plantilla <parameter>prueba_de_terminar</parameter> indica la condición de terminar).
</para>

<para>
Si se evalúa la plantilla cero veces, CASCADA devuelve <parameter>valor_inicial</parameter>.
Si se evalúa la plantilla al menos una vez, CASCADA devuelve el valor producido por la última evaluación.
</para>

<para>
Las plantillas de CASCADA puede incluir el símbolo <userinput>#</userinput> para representar el número de veces que la plantilla ha sido evaluada.
Se llena esta ranura con 1 por la primera evaluación, 2 por la segunda, y así sucesivamente.
</para>

</listitem>
</varlistentry>


<varlistentry><term>Ejemplo</term>
<listitem>
<programlisting><userinput>MUESTRA CASCADA 5 [LPUT # ?] []</userinput>
[1 2 3 4 5]

<userinput>PARA VOCAL? :arg
  DEVUELVE MIEMBRO? :arg "aáeéiíoóuúü
FIN

MUESTRA CASCADA [VOCAL? PRIMERO ?] [MENOSPRIMERO ?] "plantilla</userinput>
antilla

<userinput>MUESTRA CASCADA 5 [# * ?] 1</userinput>
120
</programlisting>

<para>
Puedes proporcionarle a CASCADA pares adicionales de los argumentos <parameter>plantilla</parameter> y <parameter>valor_inicial</parameter> para calcular varios resultados en paralelo.
En este caso, todas las plantillas (incluido la plantilla <parameter>prueba_de_terminar</parameter> si la usas) son de múltiples ranuras, con el número de ranuras siendo igual al número de pares <parameter>plantilla</parameter>/<parameter>valor_inicial</parameter> dados.
En cada ronda de evaluación, <userinput>?2</userinput> representa el resultado de la evaluación de la segunda plantilla en la ronda previa.
Si el número total de argumentos (incluido el argumento <parameter>prueba_de_terminar</parameter>) es impar, entonces CASCADA devuelve el valor final de la primera plantilla.
Si el número total de argumentos es par, entonces se toma el argumento final como una plantilla que se evalúa exactamente una vez, después de que se satisface la condición de terminar, para determina lo que CASCADA devuelve.
</para>


<programlisting><userinput>PARA FIBONACCI :n
  DEVUELVE (CASCADA :n [?1 + ?2] 1 [?1] 0)
FIN

PARA PIGLATIN :palabra
  DEVUELVE (CASCADA [VOCAL? PRIMERO ?]
                    [PALABRA MENOSPRIMERO ? PRIMERO ?]
                    :palabra
                    [PALABRA ? "ay])
FIN</userinput>
</programlisting>

</listitem>
</varlistentry>

</variablelist>
</section>
