LOAD "testlib.lgo

TO CATCHTEST.THROW.BUILTIN.ERROR
   ; force a built-in error by calling a function that doesn't exist.
   (FUNCTION.DOES.NOT.EXIST)
END

TO CATCHTEST.CATCHBUILTINERROR

   RUNIDONTKNOWHOWTOTEST [ CATCHTEST.THROW.BUILTIN.ERROR ]

END

TO CATCHTEST.CATCHUSERERROR

   ; user error without errortext input
   CATCH "ERROR [THROW "ERROR]
   CHECKERROR [THROW "ERROR] 21 "|THROW "ERROR| "CATCHTEST.CATCHUSERERROR [CATCH "ERROR [THROW "ERROR]]

   ; user error without errortext input (lowercase)
   CATCH "ERROR [throw "error]
   CHECKERROR [throw "error] 21 "|throw "error| "CATCHTEST.CATCHUSERERROR [CATCH "ERROR [throw "error]]

   ; user error with errortext input
   CATCH "ERROR [(THROW "ERROR 1234)]
   CHECKERROR [(THROW "ERROR 1234)] 21 1234  "catchtest [CATCHTEST.CATCHUSERERROR]

END


TO CATCHTEST.SMOKETEST.THROW
  REPORTTESTINFO [Entering CATCHTEST.SMOKETEST.THROW]
  (THROW "throwtag [1 2 3 4 5])
  REPORTTESTFAILED [We should never get here because we THROW back]
END


TO CATCHTEST.SMOKETEST

  LOCAL [outputvalue]

  REPORTTESTINFO [Running test where CATCH instruction list doesn't output or throw]
  CATCH "throwtag [ CLEARSCREEN ]

  REPORTTESTINFO [Running test where CATCH instruction list outputs a value]
  MAKE "outputvalue CATCH "throwtag [SUM 1 2]
  SIMPLEREPORTTEST [:outputvalue] 3

  REPORTTESTINFO [Running test where CATCH instruction list throws ]
  CATCH "throwtag [ THROW "throwtag ]

  REPORTTESTINFO [Running test where CATCH instruction list throws a value]
  MAKE "outputvalue CATCH "throwtag [CATCHTEST.SMOKETEST.THROW]
  SIMPLEREPORTTEST [:outputvalue] [1 2 3 4 5]

END

TO CATCHTEST.SKIPERRORTAG.THROW
  REPORTTESTINFO [Entering CATCHTEST.SKIPERRORTAG.THROW]
  THROW "throwtag
  REPORTTESTFAILED [We should never get here because we THROW back]
END

TO CATCHTEST.SKIPERRORTAG.CATCHERROR
  REPORTTESTINFO [Entering CATCHTEST.SKIPERRORTAG.CATCHERROR]
  CATCH "ERROR [ CATCHTEST.SKIPERRORTAG.THROW ]
  REPORTTESTFAILED [We should never get here because we THROW back]
END

TO CATCHTEST.SKIPERRORTAG
  CATCH "throwtag [ CATCHTEST.SKIPERRORTAG.CATCHERROR ]

  ; no error should be set
  SIMPLEREPORTTEST [ERROR] []

  REPORTTESTINFO [Exiting CATCHTEST.SKIPERRORTEST]
END


TO CATCHTEST.SKIPTHROWTAG.THROWERROR
  REPORTTESTINFO [Entering CATCHTEST.SKIPTHROWTAG.THROWERROR]
  Throw "Error
  REPORTTESTFAILED [We should never get here because we THROW back]
END

TO CATCHTEST.SKIPTHROWTAG.CATCHTHROWTAG
  REPORTTESTINFO [Entering CATCHTEST.SKIPTHROWTAG.CATCHTHROWTAG]
  CATCH "throwtag [ CATCHTEST.SKIPTHROWTAG.THROWERROR ]
  REPORTTESTFAILED [We should never get here because we THROW back]
END

TO CATCHTEST.SKIPTHROWTAG
  CATCH "ERROR [ CATCHTEST.SKIPTHROWTAG.CATCHTHROWTAG ]
  CHECKERROR [CATCHTEST.SKIPTHROWTAG.CATCHTHROWTAG] 21 "|Throw "Error| "CATCHTEST.SKIPTHROWTAG.THROWERROR [Throw "Error]

  REPORTTESTINFO [Exiting CATCHTEST.SKIPTHROWTAG]
END


TO CATCHTEST.SKIPTHROWTAGWITHVALUE.THROWOUTERTAG
  REPORTTESTINFO [Entering CATCHTEST.SKIPTHROWTAGWTIHVALUE.THROWOUTERTAG]

  (THROW "outertag "12345)

  REPORTTESTFAILED [We should never get here because we THROW back]
END

TO CATCHTEST.SKIPTHROWTAGWITHVALUE.CATCHINNERTAG
  REPORTTESTINFO [Entering CATCHTEST.SKIPTHROWTAG.CATCHINNERTAG]

  CATCH "innertag [ CATCHTEST.SKIPTHROWTAGWITHVALUE.THROWOUTERTAG ]

  REPORTTESTFAILED [We should never get here because we THROW back]
END

TO CATCHTEST.SKIPTHROWTAGWITHVALUE
  LOCALMAKE "throwvalue CATCH "outertag [ CATCHTEST.SKIPTHROWTAGWITHVALUE.CATCHINNERTAG ]

  SIMPLEREPORTTEST [:throwvalue] "12345

  REPORTTESTINFO [Exiting CATCHTEST.SKIPTHROWTAGWITHVALUE]
END


TO CATCHTEST.DOUBLECATCHERROR.THROWERROR
  REPORTTESTINFO [Entering CATCHTEST.DOUBLECATCHERROR.THROWERROR]
  Throw "Error
  REPORTTESTFAILED [We should never get here because we THROW back]
END

TO CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR
  REPORTTESTINFO [Entering CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR]

  CATCH "ERROR [ CATCHTEST.DOUBLECATCHERROR.THROWERROR ]
  CHECKERROR [CATCHTEST.DOUBLECATCHERROR.THROWERROR] 21 "|Throw "Error| "CATCHTEST.DOUBLECATCHERROR.THROWERROR [Throw "Error]

  REPORTTESTINFO [Exiting CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR]
END

TO CATCHTEST.DOUBLECATCHERROR
  CATCH "ERROR [ CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR ]

  ; no error should be set
  SIMPLEREPORTTEST [ERROR] []

  REPORTTESTINFO [Exiting CATCHTEST.DOUBLECATCHERROR]
END


TO CATCHTEST.BADINPUT

   RUNNOTENOUGHINPUTSTEST [ (CATCH "error) ]
   RUNTOOMANYINPUTSTEST   [ (CATCH "error [instructionlist] "toomany) ]
END


TO THROWTEST.USERERROR.ACTUALTHROWLOCATION :throwvalue
   (THROW "ERROR :throwvalue)
END

TO THROWTEST.USERERROR

   ; throw a string
   CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION "abc]
   CHECKERROR ~
      [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION "abc]] ~
      21 ~
      "abc ~
      "THROWTEST.USERERROR ~
      [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION "abc]]

   ; throw a list (which should be converted to a string)
   CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION [a b c]]
   CHECKERROR ~
      [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION [a b c]]] ~
      21 ~
      "|a b c| ~
      "THROWTEST.USERERROR ~
      [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION [a b c]]]

   ; throw an array (which should be converted to a string)
   LOCALMAKE "array {a b c}
   CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION :array]
   CHECKERROR ~
      [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION :array]] ~
      21 ~
      "|{a b c}| ~
      "THROWTEST.USERERROR ~
      [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION :array]]

END

TO THROWTEST.BADINPUT

   RUNNOTENOUGHINPUTSTEST [ (THROW) ]
   RUNTOOMANYINPUTSTEST   [ (THROW "tag "value "secondvalue "toomany) ]
END

TO CATCHTEST

  CATCHTEST.SMOKETEST
  CATCHTEST.CATCHBUILTINERROR
  CATCHTEST.CATCHUSERERROR
  CATCHTEST.SKIPERRORTAG
  CATCHTEST.SKIPTHROWTAG
  CATCHTEST.SKIPTHROWTAGWITHVALUE
  CATCHTEST.DOUBLECATCHERROR

  CATCHTEST.BADINPUT

  THROWTEST.USERERROR
  THROWTEST.BADINPUT
END
