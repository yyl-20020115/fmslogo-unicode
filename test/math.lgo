LOAD "testlib.lgo

TO SUMTEST

   ; test addition
   SIMPLEREPORTTEST [0 + 0]   0
   SIMPLEREPORTTEST [0 + 1]   1
   SIMPLEREPORTTEST [0 + -1]  -1
   SIMPLEREPORTTEST [5 + 0]   5
   SIMPLEREPORTTEST [5 + 1]   6
   SIMPLEREPORTTEST [5 + -1]  4
   SIMPLEREPORTTEST [-5 + 0]  -5
   SIMPLEREPORTTEST [-5 + 1]  -4
   SIMPLEREPORTTEST [-5 + -1] -6

   SIMPLEREPORTTEST [SUM 0 0]     0
   SIMPLEREPORTTEST [SUM 0 1]     1
   SIMPLEREPORTTEST [SUM 0 -1]    -1
   SIMPLEREPORTTEST [SUM 5 0]     5
   SIMPLEREPORTTEST [SUM 5 1]     6
   SIMPLEREPORTTEST [SUM 5 -1]    4

   SIMPLEREPORTTEST [SUM "1 "2]   3

   SIMPLEREPORTTEST [SUM 1e40 2e39] 1.2e40

   ; different number of inputs
   SIMPLEREPORTTEST [(SUM)]       0
   SIMPLEREPORTTEST [(SUM 5)]     5

   SIMPLEREPORTTEST [(SUM 1 2   3 4   5)] 15
   SIMPLEREPORTTEST [(SUM 1 2.5 3 4.5 5)] 16



   ;
   ; bad input
   ; 

   ; first input is bad
   RUNBADINPUTTEST [[]   + 2 ]
   RUNBADINPUTTEST [[1]  + 2 ]
   RUNBADINPUTTEST [{}   + 2 ]
   RUNBADINPUTTEST [{1}  + 2 ]
   RUNBADINPUTTEST ["one + 2 ]
   RUNBADINPUTTEST ["1a  + 2 ]

   ; second input is bad
   RUNBADINPUTTEST [1 + []   ]
   RUNBADINPUTTEST [1 + [2]  ]
   RUNBADINPUTTEST [1 + {}   ]
   RUNBADINPUTTEST [1 + {2}  ]
   RUNBADINPUTTEST [1 + "two ]
   RUNBADINPUTTEST [1 + "2a  ]

   ; first input is bad
   RUNBADINPUTTEST [SUM []   2    ]
   RUNBADINPUTTEST [SUM [1]  2    ]
   RUNBADINPUTTEST [SUM {}   2    ]
   RUNBADINPUTTEST [SUM {1}  2    ]
   RUNBADINPUTTEST [SUM "one 2    ]
   RUNBADINPUTTEST [SUM "1a  2    ]

   ; second input is bad
   RUNBADINPUTTEST [SUM 1    []   ]
   RUNBADINPUTTEST [SUM 1    [2]  ]
   RUNBADINPUTTEST [SUM 1    {}   ]
   RUNBADINPUTTEST [SUM 1    {2}  ]
   RUNBADINPUTTEST [SUM 1    "two ]
   RUNBADINPUTTEST [SUM 1    "2a  ]

   ; third input is bad
   RUNBADINPUTTEST [(SUM 1 2 [])]
   RUNBADINPUTTEST [(SUM 1 2 [3])]
   RUNBADINPUTTEST [(SUM 1 2 {})]
   RUNBADINPUTTEST [(SUM 1 2 {3})]
   RUNBADINPUTTEST [(SUM 1 2 "three)]
   RUNBADINPUTTEST [(SUM 1 2 "3a)]

END


TO DIFFERENCETEST

   ; test addition
   SIMPLEREPORTTEST [0 - 0]   0
   SIMPLEREPORTTEST [0 - 1]   -1
   SIMPLEREPORTTEST [0 - -1]  1
   SIMPLEREPORTTEST [5 - 0]   5
   SIMPLEREPORTTEST [5 - 1]   4
   SIMPLEREPORTTEST [5 - -1]  6
   SIMPLEREPORTTEST [-5 - 0]  -5
   SIMPLEREPORTTEST [-5 - 1]  -6
   SIMPLEREPORTTEST [-5 - -1] -4

   SIMPLEREPORTTEST [DIFFERENCE 0 0]     0
   SIMPLEREPORTTEST [DIFFERENCE 0 1]     -1
   SIMPLEREPORTTEST [DIFFERENCE 0 -1]    1
   SIMPLEREPORTTEST [DIFFERENCE 5 0]     5
   SIMPLEREPORTTEST [DIFFERENCE 5 1]     4
   SIMPLEREPORTTEST [DIFFERENCE 5 -1]    6

   SIMPLEREPORTTEST [DIFFERENCE "3 "2]   1

   SIMPLEREPORTTEST [DIFFERENCE 1.2e40 2e39] 1.0e40

   ;
   ; bad input
   ; 
   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(DIFFERENCE)]
   RUNNOTENOUGHINPUTSTEST [(DIFFERENCE 5)]
   RUNTOOMANYINPUTSTEST   [(DIFFERENCE 5 6 7)]

   ; first input is bad
   RUNBADINPUTTEST [[]   - 2 ]
   RUNBADINPUTTEST [[1]  - 2 ]
   RUNBADINPUTTEST [{}   - 2 ]
   RUNBADINPUTTEST [{1}  - 2 ]
   RUNBADINPUTTEST ["one - 2 ]
   RUNBADINPUTTEST ["1a  - 2 ]

   ; second input is bad
   RUNBADINPUTTEST [1 - []   ]
   RUNBADINPUTTEST [1 - [2]  ]
   RUNBADINPUTTEST [1 - {}   ]
   RUNBADINPUTTEST [1 - {2}  ]
   RUNBADINPUTTEST [1 - "two ]
   RUNBADINPUTTEST [1 - "2a  ]

   ; first input is bad
   RUNBADINPUTTEST [DIFFERENCE []   2    ]
   RUNBADINPUTTEST [DIFFERENCE [1]  2    ]
   RUNBADINPUTTEST [DIFFERENCE {}   2    ]
   RUNBADINPUTTEST [DIFFERENCE {1}  2    ]
   RUNBADINPUTTEST [DIFFERENCE "one 2    ]
   RUNBADINPUTTEST [DIFFERENCE "1a  2    ]

   ; second input is bad
   RUNBADINPUTTEST [DIFFERENCE 1    []   ]
   RUNBADINPUTTEST [DIFFERENCE 1    [2]  ]
   RUNBADINPUTTEST [DIFFERENCE 1    {}   ]
   RUNBADINPUTTEST [DIFFERENCE 1    {2}  ]
   RUNBADINPUTTEST [DIFFERENCE 1    "two ]
   RUNBADINPUTTEST [DIFFERENCE 1    "2a  ]

END

TO PRODUCTTEST

   ; test multiplication
   SIMPLEREPORTTEST [0  * 0 ]  0
   SIMPLEREPORTTEST [0  * 1 ]  0
   SIMPLEREPORTTEST [1  * 0 ]  0
   SIMPLEREPORTTEST [2  * 4 ]  8
   SIMPLEREPORTTEST [4  * 2 ]  8
   SIMPLEREPORTTEST [-2 * 4 ]  -8
   SIMPLEREPORTTEST [2  * -4]  -8
   SIMPLEREPORTTEST [-2 * -4]  8

   SIMPLEREPORTTEST ["2     * "4]      8
   SIMPLEREPORTTEST [1e10   * 2e20]    2e30
   SIMPLEREPORTTEST [1e200  * 1e200]   "1.#INF
   SIMPLEREPORTTEST [1e200  * -1e200]  "-1.#INF
   SIMPLEREPORTTEST [-1e200 * -1e200]  "1.#INF
   SIMPLEREPORTTEST [1e200  * 1e-200]  1

   SIMPLEREPORTTEST [PRODUCT 0  0 ]  0
   SIMPLEREPORTTEST [PRODUCT 0  1 ]  0
   SIMPLEREPORTTEST [PRODUCT 1  0 ]  0
   SIMPLEREPORTTEST [PRODUCT 2  4 ]  8
   SIMPLEREPORTTEST [PRODUCT 4  2 ]  8
   SIMPLEREPORTTEST [PRODUCT -2 4 ]  -8
   SIMPLEREPORTTEST [PRODUCT 2  -4]  -8
   SIMPLEREPORTTEST [PRODUCT -2 -4]  8

   SIMPLEREPORTTEST [PRODUCT "2     "4]      8
   SIMPLEREPORTTEST [PRODUCT 1e10   2e20]    2e30
   SIMPLEREPORTTEST [PRODUCT 1e200  1e200]   "1.#INF
   SIMPLEREPORTTEST [PRODUCT 1e200  -1e200]  "-1.#INF
   SIMPLEREPORTTEST [PRODUCT -1e200 -1e200]  "1.#INF
   SIMPLEREPORTTEST [PRODUCT 1e200  1e-200]  1

   ; different number of inputs
   SIMPLEREPORTTEST [(PRODUCT)]       1
   SIMPLEREPORTTEST [(PRODUCT 5)]     5

   SIMPLEREPORTTEST [(PRODUCT 1 2 3 4 5)]     120
   SIMPLEREPORTTEST [(PRODUCT 1 2 3 4 5 0.5)] 60

   SIMPLEREPORTTEST [(PRODUCT 1.10 1 2 3 4 5)] 132
   SIMPLEREPORTTEST [(PRODUCT 1.01 1 2 3 4 5)] 121.2



   ;
   ; bad input
   ; 

   ; first input is bad
   RUNBADINPUTTEST [[]   * 2 ]
   RUNBADINPUTTEST [[1]  * 2 ]
   RUNBADINPUTTEST [{}   * 2 ]
   RUNBADINPUTTEST [{1}  * 2 ]
   RUNBADINPUTTEST ["one * 2 ]
   RUNBADINPUTTEST ["1a  * 2 ]

   ; second input is bad
   RUNBADINPUTTEST [1 * []   ]
   RUNBADINPUTTEST [1 * [2]  ]
   RUNBADINPUTTEST [1 * {}   ]
   RUNBADINPUTTEST [1 * {2}  ]
   RUNBADINPUTTEST [1 * "two ]
   RUNBADINPUTTEST [1 * "2a  ]

   ; first input is bad
   RUNBADINPUTTEST [PRODUCT []   2    ]
   RUNBADINPUTTEST [PRODUCT [1]  2    ]
   RUNBADINPUTTEST [PRODUCT {}   2    ]
   RUNBADINPUTTEST [PRODUCT {1}  2    ]
   RUNBADINPUTTEST [PRODUCT "one 2    ]
   RUNBADINPUTTEST [PRODUCT "1a  2    ]

   ; second input is bad
   RUNBADINPUTTEST [PRODUCT 1    []   ]
   RUNBADINPUTTEST [PRODUCT 1    [2]  ]
   RUNBADINPUTTEST [PRODUCT 1    {}   ]
   RUNBADINPUTTEST [PRODUCT 1    {2}  ]
   RUNBADINPUTTEST [PRODUCT 1    "two ]
   RUNBADINPUTTEST [PRODUCT 1    "2a  ]

   ; third input is bad
   RUNBADINPUTTEST [(PRODUCT 1 2 [])]
   RUNBADINPUTTEST [(PRODUCT 1 2 [3])]
   RUNBADINPUTTEST [(PRODUCT 1 2 {})]
   RUNBADINPUTTEST [(PRODUCT 1 2 {3})]
   RUNBADINPUTTEST [(PRODUCT 1 2 "three)]
   RUNBADINPUTTEST [(PRODUCT 1 2 "3a)]

END

TO MINUSTEST

   ; test minus
   SIMPLEREPORTTEST [-0 ]       0
   SIMPLEREPORTTEST [MINUS  0]  0
   SIMPLEREPORTTEST [MINUS  0]  0
   SIMPLEREPORTTEST [MINUS  2]  -2
   SIMPLEREPORTTEST [MINUS -2]  2

   SIMPLEREPORTTEST [MINUS -2e20] 2e20

   ; bad input
   RUNBADINPUTTEST [MINUS []  ]
   RUNBADINPUTTEST [MINUS [1] ]
   RUNBADINPUTTEST [MINUS {}  ]
   RUNBADINPUTTEST [MINUS {1} ]
   RUNBADINPUTTEST [MINUS "one]
   RUNBADINPUTTEST [MINUS "1a ]

   ; wrong number of inputs
   RUNNOTENOUGHINPUTSTEST [(MINUS)]
   RUNTOOMANYINPUTSTEST   [(MINUS 1 1)]

END


TO QUOTIENTTEST

   ; test division
   SIMPLEREPORTTEST [5  / 2 ]   2.5
   SIMPLEREPORTTEST [5  / -2]  -2.5
   SIMPLEREPORTTEST [-5 / 2 ]  -2.5
   SIMPLEREPORTTEST [-5 / -2]   2.5
   SIMPLEREPORTTEST [4   / 2]   2
   SIMPLEREPORTTEST [0   / 2]   0
   SIMPLEREPORTTEST [2.2 / 2]   1.1
   SIMPLEREPORTTEST [6.6 / 2.2] 3

   SIMPLEREPORTTEST [2e40 / 2e20] 1e20

   SIMPLEREPORTTEST [QUOTIENT 5  2 ]   2.5
   SIMPLEREPORTTEST [QUOTIENT 5  -2]  -2.5
   SIMPLEREPORTTEST [QUOTIENT -5 2 ]  -2.5
   SIMPLEREPORTTEST [QUOTIENT -5 -2]   2.5

   SIMPLEREPORTTEST [QUOTIENT 4   2]   2
   SIMPLEREPORTTEST [QUOTIENT 0   2]   0
   SIMPLEREPORTTEST [QUOTIENT 2.2 2]   1.1
   SIMPLEREPORTTEST [QUOTIENT 6.6 2.2] 3

   SIMPLEREPORTTEST [QUOTIENT "5 "2]   2.5

   SIMPLEREPORTTEST [QUOTIENT 2e40 2e20] 1e20

   ; one input means "take the reciprocal of"
   SIMPLEREPORTTEST [(QUOTIENT 1)]    1
   SIMPLEREPORTTEST [(QUOTIENT 10)]   0.1
   SIMPLEREPORTTEST [(QUOTIENT 0.5)]  2
   SIMPLEREPORTTEST [(QUOTIENT 1e40)] 1e-40

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(QUOTIENT)]
   RUNTOOMANYINPUTSTEST   [(QUOTIENT 5 6 7)]

   ; first input is bad
   RUNBADINPUTTEST [[]   / 2 ]
   RUNBADINPUTTEST [[1]  / 2 ]
   RUNBADINPUTTEST [{}   / 2 ]
   RUNBADINPUTTEST [{1}  / 2 ]
   RUNBADINPUTTEST ["one / 2 ]
   RUNBADINPUTTEST ["1a  / 2 ]

   ; second input is bad
   RUNBADINPUTTEST [1 / 0    ]
   RUNBADINPUTTEST [1 / []   ]
   RUNBADINPUTTEST [1 / [2]  ]
   RUNBADINPUTTEST [1 / {}   ]
   RUNBADINPUTTEST [1 / {2}  ]
   RUNBADINPUTTEST [1 / "two ]
   RUNBADINPUTTEST [1 / "2a  ]

   ; first input is bad (and only one input is given)
   RUNBADINPUTTEST [(QUOTIENT 0    )]
   RUNBADINPUTTEST [(QUOTIENT []   )]
   RUNBADINPUTTEST [(QUOTIENT [1]  )]
   RUNBADINPUTTEST [(QUOTIENT {}   )]
   RUNBADINPUTTEST [(QUOTIENT {1}  )]
   RUNBADINPUTTEST [(QUOTIENT "one )]
   RUNBADINPUTTEST [(QUOTIENT "1a  )]

   ; first input is bad
   RUNBADINPUTTEST [QUOTIENT []   2    ]
   RUNBADINPUTTEST [QUOTIENT [1]  2    ]
   RUNBADINPUTTEST [QUOTIENT {}   2    ]
   RUNBADINPUTTEST [QUOTIENT {1}  2    ]
   RUNBADINPUTTEST [QUOTIENT "one 2    ]
   RUNBADINPUTTEST [QUOTIENT "1a  2    ]

   ; second input is bad
   RUNBADINPUTTEST [QUOTIENT 1    0    ]
   RUNBADINPUTTEST [QUOTIENT 1    []   ]
   RUNBADINPUTTEST [QUOTIENT 1    [2]  ]
   RUNBADINPUTTEST [QUOTIENT 1    {}   ]
   RUNBADINPUTTEST [QUOTIENT 1    {2}  ]
   RUNBADINPUTTEST [QUOTIENT 1    "two ]
   RUNBADINPUTTEST [QUOTIENT 1    "2a  ]
   RUNBADINPUTTEST [QUOTIENT 0    "2a  ]

END


TO REMAINDERTEST

   ; test remainder
   SIMPLEREPORTTEST [REMAINDER  5  6 ]  5
   SIMPLEREPORTTEST [REMAINDER  6  2 ]  0
   SIMPLEREPORTTEST [REMAINDER  0  2 ]  0
   SIMPLEREPORTTEST [REMAINDER  5  5 ]  0
   SIMPLEREPORTTEST [REMAINDER  5  3 ]  2
   SIMPLEREPORTTEST [REMAINDER -5  3 ] -2
   SIMPLEREPORTTEST [REMAINDER  5 -3 ]  2
   SIMPLEREPORTTEST [REMAINDER -5 -3 ] -2

   ; Test words that are numbers
   SIMPLEREPORTTEST [REMAINDER "5 "2]   1

   ; Test valid non-integer inputs
   SIMPLEREPORTTEST [REMAINDER 9    2e40 ]  9
   SIMPLEREPORTTEST [REMAINDER 5.1   3.2 ]  1.9
   SIMPLEREPORTTEST [REMAINDER 5.1  -3.2 ]  1.9
   SIMPLEREPORTTEST [REMAINDER -5.1  3.2 ] -1.9
   SIMPLEREPORTTEST [REMAINDER -5.1 -3.2 ] -1.9
   SIMPLEREPORTTEST [REMAINDER 5    -3.2 ]  1.8
   SIMPLEREPORTTEST [REMAINDER 8.1   3   ]  2.1

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(REMAINDER)]
   RUNNOTENOUGHINPUTSTEST [(REMAINDER 1)]
   RUNTOOMANYINPUTSTEST   [(REMAINDER 5 6 7)]

   ; first input is bad
   RUNDOESNTLIKEINPUTTEST [REMAINDER []   2    ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER [1]  2    ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER {}   2    ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER {1}  2    ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER "one 2    ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER "1a  2    ]

   ; second input is bad
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1    0    ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1.2  0.0  ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1    []   ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1    [2]  ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1    {}   ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1    {2}  ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1    "two ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 1    "2a  ]
   RUNDOESNTLIKEINPUTTEST [REMAINDER 0    "2a  ]

  ; Confirm that the errors are really recoverable
  ; In this case, all initial inputs are bad, as
  ; are the first replacement value which ERRACT outputs
  ; for each of the inputs.
  RUNRECOVERABLEERRORTEST ~
    [(REMAINDER "bad "input)] ~
    [[bad] 5 {bad} 3 ] ~
    [2]

END

TO MODULOTEST

   ; test modulo
   SIMPLEREPORTTEST [MODULO  5  6 ]  5
   SIMPLEREPORTTEST [MODULO  6  2 ]  0
   SIMPLEREPORTTEST [MODULO  0  2 ]  0
   SIMPLEREPORTTEST [MODULO  5  5 ]  0
   SIMPLEREPORTTEST [MODULO  5  3 ]  2
   SIMPLEREPORTTEST [MODULO  5 -3 ] -1
   SIMPLEREPORTTEST [MODULO -5  3 ]  1
   SIMPLEREPORTTEST [MODULO -5 -3 ] -2  

   ; Test words that are numbers
   SIMPLEREPORTTEST [MODULO "5 "2]   1

   ; Test valid non-integer inputs
   SIMPLEREPORTTEST [MODULO 9    2e40 ]  9
   SIMPLEREPORTTEST [MODULO 5.1   3.2 ]  1.9
   SIMPLEREPORTTEST [MODULO 5.1  -3.2 ] -1.3
   SIMPLEREPORTTEST [MODULO -5.1  3.2 ]  1.3
   SIMPLEREPORTTEST [MODULO -5.1 -3.2 ] -1.9
   SIMPLEREPORTTEST [MODULO 5    -3.2 ] -1.4
   SIMPLEREPORTTEST [MODULO 8.1   3   ]  2.1

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(MODULO)]
   RUNNOTENOUGHINPUTSTEST [(MODULO 1)]
   RUNTOOMANYINPUTSTEST   [(MODULO 5 6 7)]

   ; first input is bad
   RUNDOESNTLIKEINPUTTEST [MODULO []   2    ]
   RUNDOESNTLIKEINPUTTEST [MODULO [1]  2    ]
   RUNDOESNTLIKEINPUTTEST [MODULO {}   2    ]
   RUNDOESNTLIKEINPUTTEST [MODULO {1}  2    ]
   RUNDOESNTLIKEINPUTTEST [MODULO "one 2    ]
   RUNDOESNTLIKEINPUTTEST [MODULO "1a  2    ]

   ; second input is bad
   RUNDOESNTLIKEINPUTTEST [MODULO 1    0    ]
   RUNDOESNTLIKEINPUTTEST [MODULO 1.2  0.0  ]
   RUNDOESNTLIKEINPUTTEST [MODULO 1    []   ]
   RUNDOESNTLIKEINPUTTEST [MODULO 1    [2]  ]
   RUNDOESNTLIKEINPUTTEST [MODULO 1    {}   ]
   RUNDOESNTLIKEINPUTTEST [MODULO 1    {2}  ]
   RUNDOESNTLIKEINPUTTEST [MODULO 1    "two ]
   RUNDOESNTLIKEINPUTTEST [MODULO 1    "2a  ]
   RUNDOESNTLIKEINPUTTEST [MODULO 0    "2a  ]

  ; Confirm that the errors are really recoverable
  ; In this case, all initial inputs are bad, as
  ; are the first replacement value which ERRACT outputs
  ; for each of the inputs.
  RUNRECOVERABLEERRORTEST ~
    [(MODULO "bad "input)] ~
    [[bad] 5 {bad} 3 ] ~
    [2]

END

TO INTTEST

   ; test integers
   SIMPLEREPORTTEST [INT  0   ]  0
   SIMPLEREPORTTEST [INT  8   ]  8
   SIMPLEREPORTTEST [INT  -8  ]  -8
   SIMPLEREPORTTEST [INT  8.9 ]  8
   SIMPLEREPORTTEST [INT  8.1 ]  8

   SIMPLEREPORTTEST [INT  8.9999999 ]  8
   SIMPLEREPORTTEST [INT -8.9999999 ]  -8

   SIMPLEREPORTTEST [INT 2.3e40 ] 2.3e40

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(INT)]
   RUNTOOMANYINPUTSTEST   [(INT 1 2)]

   ; input is bad
   RUNBADINPUTTEST [INT []   ]
   RUNBADINPUTTEST [INT [1]  ]
   RUNBADINPUTTEST [INT {}   ]
   RUNBADINPUTTEST [INT {1}  ]
   RUNBADINPUTTEST [INT "one ]
   RUNBADINPUTTEST [INT "1a  ]

END

TO ROUNDTEST

   ; test rounding
   SIMPLEREPORTTEST [ROUND  0    ]  0
   SIMPLEREPORTTEST [ROUND  8    ]  8
   SIMPLEREPORTTEST [ROUND  -8   ]  -8
   SIMPLEREPORTTEST [ROUND  8.1  ]  8
   SIMPLEREPORTTEST [ROUND  8.9  ]  9
   SIMPLEREPORTTEST [ROUND  8.5  ]  9
   SIMPLEREPORTTEST [ROUND  8.49 ]  8
   SIMPLEREPORTTEST [ROUND  -8.9 ]  -9
   SIMPLEREPORTTEST [ROUND  -8.1 ]  -8

   SIMPLEREPORTTEST [ROUND 2.3e40 ] 2.3e40

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(ROUND)]
   RUNTOOMANYINPUTSTEST   [(ROUND 1 2)]

   ; input is bad
   RUNBADINPUTTEST [ROUND []   ]
   RUNBADINPUTTEST [ROUND [1]  ]
   RUNBADINPUTTEST [ROUND {}   ]
   RUNBADINPUTTEST [ROUND {1}  ]
   RUNBADINPUTTEST [ROUND "one ]
   RUNBADINPUTTEST [ROUND "1a  ]

END

TO ABSTEST

   ; test absolute values
   SIMPLEREPORTTEST [ABS  0    ]  0
   SIMPLEREPORTTEST [ABS  8    ]  8
   SIMPLEREPORTTEST [ABS -8    ]  8
   SIMPLEREPORTTEST [ABS  8.1  ]  8.1
   SIMPLEREPORTTEST [ABS -8.1  ]  8.1

   SIMPLEREPORTTEST [ABS 2.3e40 ] 2.3e40

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(ABS)]
   RUNTOOMANYINPUTSTEST   [(ABS 1 2)]

   ; input is bad
   RUNBADINPUTTEST [ABS []   ]
   RUNBADINPUTTEST [ABS [1]  ]
   RUNBADINPUTTEST [ABS {}   ]
   RUNBADINPUTTEST [ABS {1}  ]
   RUNBADINPUTTEST [ABS "one ]
   RUNBADINPUTTEST [ABS "1a  ]

END

TO SIGNTEST

   ; test sign
   SIMPLEREPORTTEST [SIGN  0    ]  0
   SIMPLEREPORTTEST [SIGN  8    ]  1
   SIMPLEREPORTTEST [SIGN -8    ]  -1
   SIMPLEREPORTTEST [SIGN  0.01 ]  1
   SIMPLEREPORTTEST [SIGN -0.01 ]  -1
   SIMPLEREPORTTEST [SIGN  98.6 ]  1
   SIMPLEREPORTTEST [SIGN -98.6 ]  -1

   SIMPLEREPORTTEST [SIGN 2.3e40 ] 1

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(SIGN)]
   RUNTOOMANYINPUTSTEST   [(SIGN 1 2)]

   ; input is bad
   RUNBADINPUTTEST [SIGN []   ]
   RUNBADINPUTTEST [SIGN [1]  ]
   RUNBADINPUTTEST [SIGN {}   ]
   RUNBADINPUTTEST [SIGN {1}  ]
   RUNBADINPUTTEST [SIGN "one ]
   RUNBADINPUTTEST [SIGN "1a  ]

END



TO SQRTTEST

   ; test absolute values
   SIMPLEREPORTTEST [SQRT  0 ]    0
   SIMPLEREPORTTEST [SQRT  4 ]    2
   SIMPLEREPORTTEST [SQRT  9 ]    3
   SIMPLEREPORTTEST [SQRT  1.44 ] 1.2
   SIMPLEREPORTTEST [SQRT  2 ]    1.4142135623730950

   SIMPLEREPORTTEST [SQRT 1e40 ] 1e20

   ;
   ; bad input
   ; 

   ; bad number of inputs
   RUNNOTENOUGHINPUTSTEST [(SQRT)]
   RUNTOOMANYINPUTSTEST   [(SQRT 1 2)]

   ; input is bad
   RUNBADINPUTTEST [SQRT -1   ]
   RUNBADINPUTTEST [SQRT []   ]
   RUNBADINPUTTEST [SQRT [1]  ]
   RUNBADINPUTTEST [SQRT {}   ]
   RUNBADINPUTTEST [SQRT {1}  ]
   RUNBADINPUTTEST [SQRT "one ]
   RUNBADINPUTTEST [SQRT "1a  ]

END



TO POWERTEST

   ; test exponentiation

   ; x^0 == 1
   SIMPLEREPORTTEST [POWER 1    0 ] 1
   SIMPLEREPORTTEST [POWER -1   0 ] 1
   SIMPLEREPORTTEST [POWER 2    0 ] 1
   SIMPLEREPORTTEST [POWER 1.23 0 ] 1
   SIMPLEREPORTTEST [POWER 1e40 0 ] 1

   ; x^1 == x
   SIMPLEREPORTTEST [POWER 0    1 ] 0
   SIMPLEREPORTTEST [POWER 1    1 ] 1
   SIMPLEREPORTTEST [POWER -1   1 ] -1
   SIMPLEREPORTTEST [POWER 2    1 ] 2
   SIMPLEREPORTTEST [POWER 1.23 1 ] 1.23
   SIMPLEREPORTTEST [POWER 1e40 1 ] 1e40

   ; x^2 == x * x
   SIMPLEREPORTTEST [POWER 0    2 ] 0
   SIMPLEREPORTTEST [POWER 1    2 ] 1
   SIMPLEREPORTTEST [POWER -1   2 ] 1
   SIMPLEREPORTTEST [POWER 2    2 ] 4
   SIMPLEREPORTTEST [POWER 1.23 2 ] 1.5129
   SIMPLEREPORTTEST [POWER 1e40 2 ] 1e80

   ; x^5 == x*x*x*x*x
   SIMPLEREPORTTEST [POWER 0    5 ] 0
   SIMPLEREPORTTEST [POWER 1    5 ] 1
   SIMPLEREPORTTEST [POWER -1   5 ] -1
   SIMPLEREPORTTEST [POWER 2    5 ] 32
   SIMPLEREPORTTEST [POWER 1.1  5 ] 1.61051
   SIMPLEREPORTTEST [POWER -1.1 5 ] -1.61051
   SIMPLEREPORTTEST [POWER 1e2  5 ] 1e10
   SIMPLEREPORTTEST [POWER 1e-2 5 ] 1e-10

   ; x^-1 == 1 / x
   SIMPLEREPORTTEST [POWER 1    -1 ] 1
   SIMPLEREPORTTEST [POWER 2    -1 ] 0.5
   SIMPLEREPORTTEST [POWER 0.5  -1 ] 2
   SIMPLEREPORTTEST [POWER 1e40 -1 ] 1e-40
   SIMPLEREPORTTEST [POWER -1   -1 ] -1

   ; x^-2 == 1 / x^2
   SIMPLEREPORTTEST [POWER 1    2 ] 1
   SIMPLEREPORTTEST [POWER 2    2 ] 4
   SIMPLEREPORTTEST [POWER 1.23 2 ] 1.5129
   SIMPLEREPORTTEST [POWER 1e40 -1 ] 1e-40
   SIMPLEREPORTTEST [POWER -1   -1 ] -1

   ; x^0.5 == SQRT x
   SIMPLEREPORTTEST [POWER 0     0.5 ] 0
   SIMPLEREPORTTEST [POWER 4     0.5 ] 2
   SIMPLEREPORTTEST [POWER 9     0.5 ] 3
   SIMPLEREPORTTEST [POWER 1.44  0.5 ] 1.2
   SIMPLEREPORTTEST [POWER 2     0.5 ] 1.4142135623730950
   SIMPLEREPORTTEST [POWER 1e40  0.5 ] 1e20


   ;
   ; bad input tests
   ;

   ; overflow 
   ; REVISIT: should this return 1.#INF and -1.#INF to be consistent with PRODUCT?
   RUNBADINPUTTEST [POWER 1e100  5]
   RUNBADINPUTTEST [POWER -1e100 5]

   ; From: http://mathworld.wolfram.com/Zero.html
   ;
   ; 0^0 itself is undefined. The lack of a well-defined meaning 
   ; for this quantity follows from the mutually contradictory 
   ; facts that x^0 is always 1, so 0^0 should equal 1, but 0^a 
   ; is always 0, so 0^0 should equal 0.
   RUNBADINPUTTEST [POWER 0 0 ]

   ; math errors
   RUNBADINPUTTEST [POWER 0   -1  ]
   RUNBADINPUTTEST [POWER -1  0.5 ]

   ; wrong number of inputs
   RUNNOTENOUGHINPUTSTEST [(POWER)]
   RUNNOTENOUGHINPUTSTEST [(POWER 1)]
   RUNTOOMANYINPUTSTEST   [(POWER 1 2 3)]

   ; first input is bad
   RUNBADINPUTTEST [POWER []   2    ]
   RUNBADINPUTTEST [POWER [1]  2    ]
   RUNBADINPUTTEST [POWER {}   2    ]
   RUNBADINPUTTEST [POWER {1}  2    ]
   RUNBADINPUTTEST [POWER "one 2    ]
   RUNBADINPUTTEST [POWER "1a  2    ]

   ; second input is bad
   RUNBADINPUTTEST [POWER 1    []   ]
   RUNBADINPUTTEST [POWER 1    [2]  ]
   RUNBADINPUTTEST [POWER 1    {}   ]
   RUNBADINPUTTEST [POWER 1    {2}  ]
   RUNBADINPUTTEST [POWER 1    "two ]
   RUNBADINPUTTEST [POWER 1    "2a  ]

END

TO EXPTEST

   ; test e^x
   SIMPLEREPORTTEST [EXP 0  ] 1
   SIMPLEREPORTTEST [EXP 1  ] 2.71828182845905
   SIMPLEREPORTTEST [EXP 2  ] 7.38905609893065
   SIMPLEREPORTTEST [EXP -1 ] 0.367879441171442

   ;
   ; bad input tests
   ;

   ; overflow 
   ; REVISIT: should this return 1.#INF to be consistent with PRODUCT?
   RUNBADINPUTTEST [EXP 1e40 ]

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(EXP)]
   RUNTOOMANYINPUTSTEST   [(EXP 1 2)]

   ; input is bad
   RUNBADINPUTTEST [EXP []   ]
   RUNBADINPUTTEST [EXP [1]  ]
   RUNBADINPUTTEST [EXP {}   ]
   RUNBADINPUTTEST [EXP {1}  ]
   RUNBADINPUTTEST [EXP "one ]
   RUNBADINPUTTEST [EXP "1a  ]

END

TO LOG10TEST

   ; test log10
   SIMPLEREPORTTEST [LOG10 1     ] 0
   SIMPLEREPORTTEST [LOG10 1e1   ] 1
   SIMPLEREPORTTEST [LOG10 1e2   ] 2
   SIMPLEREPORTTEST [LOG10 1e-2  ] -2
   SIMPLEREPORTTEST [LOG10 1e100 ] 100
   SIMPLEREPORTTEST [LOG10 50    ] 1.69897000433602

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(LOG10)]
   RUNTOOMANYINPUTSTEST   [(LOG10 1 2)]

   ; domain errors
   RUNBADINPUTTEST [LOG10 0  ]
   RUNBADINPUTTEST [LOG10 -1 ]

   ; input is bad
   RUNBADINPUTTEST [LOG10 []   ]
   RUNBADINPUTTEST [LOG10 [1]  ]
   RUNBADINPUTTEST [LOG10 {}   ]
   RUNBADINPUTTEST [LOG10 {1}  ]
   RUNBADINPUTTEST [LOG10 "one ]
   RUNBADINPUTTEST [LOG10 "1a  ]

END

TO LNTEST

   ; test log e
   SIMPLEREPORTTEST [LN 1                  ] 0
   SIMPLEREPORTTEST [LN 2.71828182845905   ] 1
   SIMPLEREPORTTEST [LN 500                ] 6.21460809842219

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(LN)]
   RUNTOOMANYINPUTSTEST   [(LN 1 2)]

   ; domain errors
   RUNBADINPUTTEST [LN 0  ]
   RUNBADINPUTTEST [LN -1 ]

   ; input is bad
   RUNBADINPUTTEST [LN []   ]
   RUNBADINPUTTEST [LN [1]  ]
   RUNBADINPUTTEST [LN {}   ]
   RUNBADINPUTTEST [LN {1}  ]
   RUNBADINPUTTEST [LN "one ]
   RUNBADINPUTTEST [LN "1a  ]

END

TO PITEST

   ; test pi
   SIMPLEREPORTTEST [PI] 3.141592653589793227020265931059839203954

   ; bad input test
   RUNTOOMANYINPUTSTEST [(PI 1)]

END

TO GOLDENRATIOTEST

   ; test the golden ratio
   SIMPLEREPORTTEST [GOLDENRATIO] 1.6180339887498948

   ; bad input test
   RUNTOOMANYINPUTSTEST [(GOLDENRATIO 1)]

END

TO TANTEST

   ; test tangent
   SIMPLEREPORTTEST [TAN 0    ] 0
   SIMPLEREPORTTEST [TAN 45   ] 1
   SIMPLEREPORTTEST [TAN -45  ] -1
   SIMPLEREPORTTEST [TAN 135  ] -1
   SIMPLEREPORTTEST [TAN 225  ] 1
   SIMPLEREPORTTEST [TAN 180  ] 0
   SIMPLEREPORTTEST [TAN 360  ] 0
   SIMPLEREPORTTEST [TAN 3600 ] 0
   SIMPLEREPORTTEST [TAN 14.5 ] 0.25861758435589028187700082104918

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(TAN)]
   RUNTOOMANYINPUTSTEST   [(TAN 1 2)]

   ; domain errors
   RUNBADINPUTTEST [TAN 90   ]
   RUNBADINPUTTEST [TAN -90  ]
   RUNBADINPUTTEST [TAN 270  ]
   RUNBADINPUTTEST [TAN 3690 ]

   ; input is bad
   RUNBADINPUTTEST [TAN []   ]
   RUNBADINPUTTEST [TAN [1]  ]
   RUNBADINPUTTEST [TAN {}   ]
   RUNBADINPUTTEST [TAN {1}  ]
   RUNBADINPUTTEST [TAN "one ]
   RUNBADINPUTTEST [TAN "1a  ]

END


TO RADTANTEST

   ; test rad tangent
   SIMPLEREPORTTEST [RADTAN ( 0        ) ] 0
   SIMPLEREPORTTEST [RADTAN ( 0.25 * PI) ] 1
   SIMPLEREPORTTEST [RADTAN (-0.25 * PI) ] -1
   SIMPLEREPORTTEST [RADTAN ( 0.75 * PI) ] -1
   SIMPLEREPORTTEST [RADTAN ( 1.25 * PI) ] 1
   SIMPLEREPORTTEST [RADTAN ( PI       ) ] 0
   SIMPLEREPORTTEST [RADTAN ( 2  * PI  ) ] 0
   SIMPLEREPORTTEST [RADTAN ( 10 * PI  ) ] 0
   SIMPLEREPORTTEST [RADTAN ( 14.5     ) ] -2.6340691325038328334096070350529

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(RADTAN)]
   RUNTOOMANYINPUTSTEST   [(RADTAN 1 2)]

   ; domain errors
   RUNBADINPUTTEST [RADTAN ( 0.5 * PI) ]
   RUNBADINPUTTEST [RADTAN (-0.5 * PI) ]
   RUNBADINPUTTEST [RADTAN ( 1.5 * PI) ]
   RUNBADINPUTTEST [RADTAN ( 100 * PI) ]

   ; input is bad
   RUNBADINPUTTEST [RADTAN []   ]
   RUNBADINPUTTEST [RADTAN [1]  ]
   RUNBADINPUTTEST [RADTAN {}   ]
   RUNBADINPUTTEST [RADTAN {1}  ]
   RUNBADINPUTTEST [RADTAN "one ]
   RUNBADINPUTTEST [RADTAN "1a  ]

END

TO ARCTANTEST

   ; test arc tangent
   SIMPLEREPORTTEST [ARCTAN 0    ]   0
   SIMPLEREPORTTEST [ARCTAN 1    ]  45
   SIMPLEREPORTTEST [ARCTAN -1   ] -45
   SIMPLEREPORTTEST [ARCTAN 14.5 ]  86.054813770962436821376817156226

   ; test two inputs
   SIMPLEREPORTTEST [(ARCTAN  1   0  )]    0
   SIMPLEREPORTTEST [(ARCTAN  1   1  )]   45
   SIMPLEREPORTTEST [(ARCTAN  1  -1  )]  -45
   SIMPLEREPORTTEST [(ARCTAN -1   1  )]  135 
   SIMPLEREPORTTEST [(ARCTAN -1  -1  )] -135
   SIMPLEREPORTTEST [(ARCTAN  1  14.5)]   86.054813770962436821376817156226

   SIMPLEREPORTTEST [(ARCTAN 2   0)]   0
   SIMPLEREPORTTEST [(ARCTAN 2   2)]  45
   SIMPLEREPORTTEST [(ARCTAN 2  -2)] -45
   SIMPLEREPORTTEST [(ARCTAN 2  29)]  86.054813770962436821376817156226

   ; This is well-defined (it's not a divide by zero)
   SIMPLEREPORTTEST [(ARCTAN  0  1)]  90

   SIMPLEREPORTTEST [(ARCTAN 1 100)]  (ARCTAN 100)

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(ARCTAN)]
   RUNTOOMANYINPUTSTEST   [(ARCTAN 1 2 3)]

   ; first and only input is bad
   RUNBADINPUTTEST [ARCTAN []   ]
   RUNBADINPUTTEST [ARCTAN [1]  ]
   RUNBADINPUTTEST [ARCTAN {}   ]
   RUNBADINPUTTEST [ARCTAN {1}  ]
   RUNBADINPUTTEST [ARCTAN "one ]
   RUNBADINPUTTEST [ARCTAN "1a  ]

   ; first of two inputs is bad
   RUNBADINPUTTEST [(ARCTAN []    1)]
   RUNBADINPUTTEST [(ARCTAN [1]   1)]
   RUNBADINPUTTEST [(ARCTAN {}    1)]
   RUNBADINPUTTEST [(ARCTAN {1}   1)]
   RUNBADINPUTTEST [(ARCTAN "one  1)]
   RUNBADINPUTTEST [(ARCTAN "1a   1)]

   ; second of two inputs is bad
   RUNBADINPUTTEST [(ARCTAN 1    []   )]
   RUNBADINPUTTEST [(ARCTAN 1    [1]  )]
   RUNBADINPUTTEST [(ARCTAN 1    {}   )]
   RUNBADINPUTTEST [(ARCTAN 1    {1}  )]
   RUNBADINPUTTEST [(ARCTAN 1    "one )]
   RUNBADINPUTTEST [(ARCTAN 1    "1a  )]

END


TO RADARCTANTEST

   ; test rad arc tangent
   SIMPLEREPORTTEST [RADARCTAN 0    ]  0
   SIMPLEREPORTTEST [RADARCTAN 1    ]  0.25 * PI
   SIMPLEREPORTTEST [RADARCTAN -1   ] -0.25 * PI
   SIMPLEREPORTTEST [RADARCTAN 14.5 ] 1.5019398374938520197571649905681

   ; test two inputs
   SIMPLEREPORTTEST [(RADARCTAN  1   0    )]  0
   SIMPLEREPORTTEST [(RADARCTAN  1   1    )]  0.25 * PI
   SIMPLEREPORTTEST [(RADARCTAN  1  -1    )] -0.25 * PI
   SIMPLEREPORTTEST [(RADARCTAN -1   1    )]  0.75 * PI
   SIMPLEREPORTTEST [(RADARCTAN -1  -1    )] -0.75 * PI
   SIMPLEREPORTTEST [(RADARCTAN  1   14.5 )]  1.5019398374938520197571649905681

   SIMPLEREPORTTEST [(RADARCTAN  2   0   )]  0
   SIMPLEREPORTTEST [(RADARCTAN  2   2   )]  0.25 * PI
   SIMPLEREPORTTEST [(RADARCTAN  2  -2   )] -0.25 * PI
   SIMPLEREPORTTEST [(RADARCTAN  2   29  )] 1.5019398374938520197571649905681

   ; This is well-defined (it's not a divide by zero)
   SIMPLEREPORTTEST [(RADARCTAN  0   1   )]  0.50 * PI

   SIMPLEREPORTTEST [(RADARCTAN 1 100)]     (RADARCTAN 100)


   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(RADARCTAN)]
   RUNTOOMANYINPUTSTEST   [(RADARCTAN 1 2 3)]

   ; first and only input is bad
   RUNBADINPUTTEST [RADARCTAN []   ]
   RUNBADINPUTTEST [RADARCTAN [1]  ]
   RUNBADINPUTTEST [RADARCTAN {}   ]
   RUNBADINPUTTEST [RADARCTAN {1}  ]
   RUNBADINPUTTEST [RADARCTAN "one ]
   RUNBADINPUTTEST [RADARCTAN "1a  ]

   ; first of two inputs is bad
   RUNBADINPUTTEST [(RADARCTAN []    1)]
   RUNBADINPUTTEST [(RADARCTAN [1]   1)]
   RUNBADINPUTTEST [(RADARCTAN {}    1)]
   RUNBADINPUTTEST [(RADARCTAN {1}   1)]
   RUNBADINPUTTEST [(RADARCTAN "one  1)]
   RUNBADINPUTTEST [(RADARCTAN "1a   1)]

   ; second of two inputs is bad
   RUNBADINPUTTEST [(RADARCTAN 1    []   )]
   RUNBADINPUTTEST [(RADARCTAN 1    [1]  )]
   RUNBADINPUTTEST [(RADARCTAN 1    {}   )]
   RUNBADINPUTTEST [(RADARCTAN 1    {1}  )]
   RUNBADINPUTTEST [(RADARCTAN 1    "one )]
   RUNBADINPUTTEST [(RADARCTAN 1    "1a  )]
END



TO SINTEST

   ; test sine
   SIMPLEREPORTTEST [SIN 0    ] 0
   SIMPLEREPORTTEST [SIN 30   ] 0.5
   SIMPLEREPORTTEST [SIN 45   ] 0.5 * SQRT 2
   SIMPLEREPORTTEST [SIN -45  ] -0.5 * SQRT 2
   SIMPLEREPORTTEST [SIN 90   ] 1
   SIMPLEREPORTTEST [SIN 180  ] 0
   SIMPLEREPORTTEST [SIN 270  ] -1
   SIMPLEREPORTTEST [SIN 360  ] 0
   SIMPLEREPORTTEST [SIN 3600 ] 0
   SIMPLEREPORTTEST [SIN 3690 ] 1
   SIMPLEREPORTTEST [SIN 14.5 ] 0.25038000405444141588622558873704

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(SIN)]
   RUNTOOMANYINPUTSTEST   [(SIN 1 2)]

   ; input is bad
   RUNBADINPUTTEST [SIN []   ]
   RUNBADINPUTTEST [SIN [1]  ]
   RUNBADINPUTTEST [SIN {}   ]
   RUNBADINPUTTEST [SIN {1}  ]
   RUNBADINPUTTEST [SIN "one ]
   RUNBADINPUTTEST [SIN "1a  ]

END

TO RADSINTEST

   ; test rad sine
   SIMPLEREPORTTEST [RADSIN 0             ]  0
   SIMPLEREPORTTEST [RADSIN ( 0.25 * PI)  ]  0.5 * SQRT 2
   SIMPLEREPORTTEST [RADSIN (-0.25 * PI)  ] -0.5 * SQRT 2
   SIMPLEREPORTTEST [RADSIN (1/6   * PI)  ]  0.5
   SIMPLEREPORTTEST [RADSIN ( 0.5  * PI)  ]  1
   SIMPLEREPORTTEST [RADSIN PI            ]  0
   SIMPLEREPORTTEST [RADSIN (1.5    * PI) ] -1
   SIMPLEREPORTTEST [RADSIN (  2    * PI) ]  0
   SIMPLEREPORTTEST [RADSIN ( 10    * PI) ]  0
   SIMPLEREPORTTEST [RADSIN ( 10.50 * PI) ]  1
   SIMPLEREPORTTEST [RADSIN 14.5          ]  0.93489505552468303547038421783991

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(RADSIN)]
   RUNTOOMANYINPUTSTEST   [(RADSIN 1 2)]

   ; input is bad
   RUNBADINPUTTEST [RADSIN []   ]
   RUNBADINPUTTEST [RADSIN [1]  ]
   RUNBADINPUTTEST [RADSIN {}   ]
   RUNBADINPUTTEST [RADSIN {1}  ]
   RUNBADINPUTTEST [RADSIN "one ]
   RUNBADINPUTTEST [RADSIN "1a  ]

END

TO ARCSINTEST

   ; test arc sine
   SIMPLEREPORTTEST [ARCSIN  0              ] 0
   SIMPLEREPORTTEST [ARCSIN ( 0.5 * SQRT 2) ] 45
   SIMPLEREPORTTEST [ARCSIN (-0.5 * SQRT 2) ] -45
   SIMPLEREPORTTEST [ARCSIN  1              ] 90
   SIMPLEREPORTTEST [ARCSIN -1              ] -90
   SIMPLEREPORTTEST [ARCSIN  0.5            ] 30
   SIMPLEREPORTTEST [ARCSIN -0.5            ] -30

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(ARCSIN)]
   RUNTOOMANYINPUTSTEST   [(ARCSIN 1 2)]

   ; domain errors
   RUNBADINPUTTEST [ARCSIN  1.1 ]
   RUNBADINPUTTEST [ARCSIN -1.1 ]
   
   ; input is bad
   RUNBADINPUTTEST [ARCSIN []   ]
   RUNBADINPUTTEST [ARCSIN [1]  ]
   RUNBADINPUTTEST [ARCSIN {}   ]
   RUNBADINPUTTEST [ARCSIN {1}  ]
   RUNBADINPUTTEST [ARCSIN "one ]
   RUNBADINPUTTEST [ARCSIN "1a  ]

END

TO RADARCSINTEST

   ; test arc sine
   SIMPLEREPORTTEST [RADARCSIN  0              ] 0
   SIMPLEREPORTTEST [RADARCSIN ( 0.5 * SQRT 2) ]  0.25  * PI
   SIMPLEREPORTTEST [RADARCSIN (-0.5 * SQRT 2) ] -0.25  * PI
   SIMPLEREPORTTEST [RADARCSIN  1              ]  0.5   * PI
   SIMPLEREPORTTEST [RADARCSIN -1              ] -0.5   * PI
   SIMPLEREPORTTEST [RADARCSIN  0.5            ]  (1/6) * PI
   SIMPLEREPORTTEST [RADARCSIN -0.5            ] -(1/6) * PI

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(RADARCSIN)]
   RUNTOOMANYINPUTSTEST   [(RADARCSIN 1 2)]

   ; domain errors
   RUNBADINPUTTEST [RADARCSIN  1.1 ]
   RUNBADINPUTTEST [RADARCSIN -1.1 ]
   
   ; input is bad
   RUNBADINPUTTEST [RADARCSIN []   ]
   RUNBADINPUTTEST [RADARCSIN [1]  ]
   RUNBADINPUTTEST [RADARCSIN {}   ]
   RUNBADINPUTTEST [RADARCSIN {1}  ]
   RUNBADINPUTTEST [RADARCSIN "one ]
   RUNBADINPUTTEST [RADARCSIN "1a  ]

END

TO COSTEST

   ; test cosine
   SIMPLEREPORTTEST [COS 0    ]  1
   SIMPLEREPORTTEST [COS 45   ]  0.5 * SQRT 2
   SIMPLEREPORTTEST [COS -45  ]  0.5 * SQRT 2
   SIMPLEREPORTTEST [COS 225  ] -0.5 * SQRT 2
   SIMPLEREPORTTEST [COS 60   ]  0.5
   SIMPLEREPORTTEST [COS 90   ]  0
   SIMPLEREPORTTEST [COS 180  ] -1
   SIMPLEREPORTTEST [COS 270  ]  0
   SIMPLEREPORTTEST [COS 360  ]  1
   SIMPLEREPORTTEST [COS 3600 ]  1
   SIMPLEREPORTTEST [COS 3690 ]  0
   SIMPLEREPORTTEST [COS 14.5 ]  0.96814764037810777496671529862959

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(COS)]
   RUNTOOMANYINPUTSTEST   [(COS 1 2)]

   ; input is bad
   RUNBADINPUTTEST [COS []   ]
   RUNBADINPUTTEST [COS [1]  ]
   RUNBADINPUTTEST [COS {}   ]
   RUNBADINPUTTEST [COS {1}  ]
   RUNBADINPUTTEST [COS "one ]
   RUNBADINPUTTEST [COS "1a  ]

END

TO RADCOSTEST

   ; test rad cosine
   SIMPLEREPORTTEST [RADCOS 0           ]  1
   SIMPLEREPORTTEST [RADCOS ( 0.25 * PI)]  0.5 * SQRT 2
   SIMPLEREPORTTEST [RADCOS (-0.25 * PI)]  0.5 * SQRT 2
   SIMPLEREPORTTEST [RADCOS ( 1.25 * PI)] -0.5 * SQRT 2 
   SIMPLEREPORTTEST [RADCOS ( 1/3  * PI)]  0.5
   SIMPLEREPORTTEST [RADCOS ( 0.5  * PI)]  0
   SIMPLEREPORTTEST [RADCOS PI          ] -1
   SIMPLEREPORTTEST [RADCOS 1.5    * PI ]  0
   SIMPLEREPORTTEST [RADCOS   2    * PI ]  1
   SIMPLEREPORTTEST [RADCOS  10    * PI ]  1
   SIMPLEREPORTTEST [RADCOS  10.50 * PI ]  0
   SIMPLEREPORTTEST [RADCOS 14.5        ]  -0.35492426678870497332429303231405

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(RADCOS)]
   RUNTOOMANYINPUTSTEST   [(RADCOS 1 2)]

   ; input is bad
   RUNBADINPUTTEST [RADCOS []   ]
   RUNBADINPUTTEST [RADCOS [1]  ]
   RUNBADINPUTTEST [RADCOS {}   ]
   RUNBADINPUTTEST [RADCOS {1}  ]
   RUNBADINPUTTEST [RADCOS "one ]
   RUNBADINPUTTEST [RADCOS "1a  ]

END


TO ARCCOSTEST

   ; test cosine
   SIMPLEREPORTTEST [ARCCOS 1               ] 0
   SIMPLEREPORTTEST [ARCCOS ( 0.5 * SQRT 2) ] 45
   SIMPLEREPORTTEST [ARCCOS (-0.5 * SQRT 2) ] 135
   SIMPLEREPORTTEST [ARCCOS 0.5             ] 60
   SIMPLEREPORTTEST [ARCCOS 0               ] 90
   SIMPLEREPORTTEST [ARCCOS -0.5            ] 120
   SIMPLEREPORTTEST [ARCCOS -1              ] 180

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(ARCCOS)]
   RUNTOOMANYINPUTSTEST   [(ARCCOS 1 2)]

   ; domain errors
   RUNBADINPUTTEST [ARCCOS  1.1 ]
   RUNBADINPUTTEST [ARCCOS -1.1 ]

   ; input is bad
   RUNBADINPUTTEST [ARCCOS []   ]
   RUNBADINPUTTEST [ARCCOS [1]  ]
   RUNBADINPUTTEST [ARCCOS {}   ]
   RUNBADINPUTTEST [ARCCOS {1}  ]
   RUNBADINPUTTEST [ARCCOS "one ]
   RUNBADINPUTTEST [ARCCOS "1a  ]

END


TO RADARCCOSTEST

   ; test cosine
   SIMPLEREPORTTEST [RADARCCOS 1               ]  0
   SIMPLEREPORTTEST [RADARCCOS ( 0.5 * SQRT 2) ]  0.25  * PI
   SIMPLEREPORTTEST [RADARCCOS (-0.5 * SQRT 2) ]  0.75  * PI
   SIMPLEREPORTTEST [RADARCCOS 0.5             ]  (1/3) * PI
   SIMPLEREPORTTEST [RADARCCOS 0               ]  0.5   * PI
   SIMPLEREPORTTEST [RADARCCOS -0.5            ]  (2/3) * PI
   SIMPLEREPORTTEST [RADARCCOS -1              ]  PI

   ;
   ; bad input tests
   ;

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(RADCOS)]
   RUNTOOMANYINPUTSTEST   [(RADCOS 1 2)]

   ; domain errors
   RUNBADINPUTTEST [RADARCCOS  1.1 ]
   RUNBADINPUTTEST [RADARCCOS -1.1 ]

   ; input is bad
   RUNBADINPUTTEST [RADARCCOS []   ]
   RUNBADINPUTTEST [RADARCCOS [1]  ]
   RUNBADINPUTTEST [RADARCCOS {}   ] 
   RUNBADINPUTTEST [RADARCCOS {1}  ]
   RUNBADINPUTTEST [RADARCCOS "one ]
   RUNBADINPUTTEST [RADARCCOS "1a  ]

END

TO BUG80TEST
   SIMPLEREPORTTEST [PRODUCT 1e200 2e200] "1.#INF
   SIMPLEREPORTTEST [ROUND 2.3e40 ]       2.3e40
   SIMPLEREPORTTEST [PRODUCT 1e200 2e200] "1.#INF
   REPORTTESTPASSED [Bug #80 is fixed.  Multiple floating point exceptions do not crash.]
END


TO LESSPTEST.SMOKETEST

   ; whole numbers
   FAILIFNOTFALSE [ LESSP   1    1   ]
   FAILIFNOTTRUE  [ LESSP   0    1   ]
   FAILIFNOTFALSE [ LESSP   1    0   ]
   FAILIFNOTFALSE [ LESSP   0    0   ]

   ; floating-point numbers
   FAILIFNOTFALSE [ LESSP   1.5    1.5 ]
   FAILIFNOTTRUE  [ LESSP   0.5    1.5 ]
   FAILIFNOTFALSE [ LESSP   1.5    0.5 ]

   ; very small floating point numbers (Bug #289)
   FAILIFNOTFALSE [ LESSP   1e-16      0  ]
   FAILIFNOTTRUE  [ LESSP  -1e-16      0  ]
   FAILIFNOTTRUE  [ LESSP    0      1e-16 ]
   FAILIFNOTFALSE [ LESSP    0     -1e-16 ]

   ; negative numbers
   FAILIFNOTFALSE [ LESSP   -1     -2 ]
   FAILIFNOTTRUE  [ LESSP   -2     -1 ]

   ; floating point and whole numbers
   FAILIFNOTTRUE  [ LESSP  10    10.5 ]
   FAILIFNOTFALSE [ LESSP  10     9.5 ]
   FAILIFNOTFALSE [ LESSP  10.5  10   ]
   FAILIFNOTTRUE  [ LESSP  10.5  11   ]

   ; make sure LESS? is the same as LESSP
   FAILIFNOTFALSE [ LESS?   1    1   ]
   FAILIFNOTTRUE  [ LESS?   0    1   ]
   FAILIFNOTFALSE [ LESS?   1    0   ]
   FAILIFNOTTRUE  [ LESS?  -1    0   ]
   FAILIFNOTFALSE [ LESS?  -5   -10  ]
   FAILIFNOTTRUE  [ LESS?  1.1   1.2 ]
   FAILIFNOTFALSE [ LESS? -1.1  -1.2 ]

   ; make sure < is the same as LESSP
   FAILIFNOTFALSE [ 1    <   1  ]
   FAILIFNOTTRUE  [ 0    <   1  ]
   FAILIFNOTFALSE [ 1    <   0  ]
   FAILIFNOTTRUE  [ -1   <   0  ]
   FAILIFNOTFALSE [ -5   < -10  ]
   FAILIFNOTTRUE  [ 1.1  <  1.2 ]
   FAILIFNOTFALSE [ -1.1 < -1.2 ]

END


TO LESSPTEST.BADINPUT

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(LESSP 1)]
   RUNTOOMANYINPUTSTEST   [(LESSP 1 2 3)]

   ; first input is bad
   RUNDOESNTLIKEINPUTTEST [LESSP "one 2 ]
   RUNDOESNTLIKEINPUTTEST [LESSP [1]  2 ]
   RUNDOESNTLIKEINPUTTEST [LESSP []   2 ]
   RUNDOESNTLIKEINPUTTEST [LESSP {1}  2 ]

   ; second input is bad
   RUNDOESNTLIKEINPUTTEST [LESSP 2 "one ]
   RUNDOESNTLIKEINPUTTEST [LESSP 2 [1]  ]
   RUNDOESNTLIKEINPUTTEST [LESSP 2 []   ]
   RUNDOESNTLIKEINPUTTEST [LESSP 2 {1}  ]

END

TO LESSPTEST
   LESSPTEST.SMOKETEST
   LESSPTEST.BADINPUT
END


TO LESSEQUALPTEST.SMOKETEST

   ; whole numbers
   FAILIFNOTTRUE  [ LESSEQUALP   1    1   ]
   FAILIFNOTTRUE  [ LESSEQUALP   0    1   ]
   FAILIFNOTFALSE [ LESSEQUALP   1    0   ]
   FAILIFNOTTRUE  [ LESSEQUALP   0    0   ]

   ; floating-point numbers
   FAILIFNOTTRUE  [ LESSEQUALP   1.5    1.5 ]
   FAILIFNOTTRUE  [ LESSEQUALP   0.5    1.5 ]
   FAILIFNOTFALSE [ LESSEQUALP   1.5    0.5 ]

   ; negative numbers
   FAILIFNOTFALSE [ LESSEQUALP   -1     -2 ]
   FAILIFNOTTRUE  [ LESSEQUALP   -2     -1 ]

   ; floating point and whole numbers
   FAILIFNOTTRUE  [ LESSEQUALP  10    10.5 ]
   FAILIFNOTFALSE [ LESSEQUALP  10     9.5 ]
   FAILIFNOTFALSE [ LESSEQUALP  10.5  10   ]
   FAILIFNOTTRUE  [ LESSEQUALP  10.5  11   ]

   ; make sure LESSEQUAL? is the same as LESSEQUALP
   FAILIFNOTTRUE  [ LESSEQUAL?   1    1   ]
   FAILIFNOTTRUE  [ LESSEQUAL?   0    1   ]
   FAILIFNOTFALSE [ LESSEQUAL?   1    0   ]
   FAILIFNOTTRUE  [ LESSEQUAL?  -1    0   ]
   FAILIFNOTFALSE [ LESSEQUAL?  -5   -10  ]
   FAILIFNOTTRUE  [ LESSEQUAL?  1.1   1.2 ]
   FAILIFNOTFALSE [ LESSEQUAL? -1.1  -1.2 ]

   ; make sure <= is the same as LESSEQUALP
   FAILIFNOTTRUE  [ 1    <=   1  ]
   FAILIFNOTTRUE  [ 0    <=   1  ]
   FAILIFNOTFALSE [ 1    <=   0  ]
   FAILIFNOTTRUE  [ -1   <=   0  ]
   FAILIFNOTFALSE [ -5   <= -10  ]
   FAILIFNOTTRUE  [ 1.1  <=  1.2 ]
   FAILIFNOTFALSE [ -1.1 <= -1.2 ]

END


TO LESSEQUALPTEST.BADINPUT

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(LESSEQUALP 1)]
   RUNTOOMANYINPUTSTEST   [(LESSEQUALP 1 2 3)]

   ; first input is bad
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP "one 2 ]
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP [1]  2 ]
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP []   2 ]
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP {1}  2 ]

   ; second input is bad
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP 2 "one ]
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP 2 [1]  ]
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP 2 []   ]
   RUNDOESNTLIKEINPUTTEST [LESSEQUALP 2 {1}  ]

END

TO LESSEQUALPTEST
   LESSEQUALPTEST.SMOKETEST
   LESSEQUALPTEST.BADINPUT
END



TO GREATERPTEST.SMOKETEST

   ; whole numbers
   FAILIFNOTFALSE [ GREATERP   1    1   ]
   FAILIFNOTFALSE [ GREATERP   0    1   ]
   FAILIFNOTTRUE  [ GREATERP   1    0   ]
   FAILIFNOTFALSE [ GREATERP   0    0   ]

   ; floating-point numbers
   FAILIFNOTFALSE [ GREATERP   1.5    1.5 ]
   FAILIFNOTFALSE [ GREATERP   0.5    1.5 ]
   FAILIFNOTTRUE  [ GREATERP   1.5    0.5 ]

   ; very small floating point numbers (Bug #289)
   FAILIFNOTTRUE  [ GREATERP   1e-16      0  ]
   FAILIFNOTFALSE [ GREATERP  -1e-16      0  ]
   FAILIFNOTFALSE [ GREATERP    0      1e-16 ]
   FAILIFNOTTRUE  [ GREATERP    0     -1e-16 ]

   ; negative numbers
   FAILIFNOTTRUE  [ GREATERP   -1     -2 ]
   FAILIFNOTFALSE [ GREATERP   -2     -1 ]

   ; floating point and whole numbers
   FAILIFNOTFALSE [ GREATERP  10    10.5 ]
   FAILIFNOTTRUE  [ GREATERP  10     9.5 ]
   FAILIFNOTTRUE  [ GREATERP  10.5  10   ]
   FAILIFNOTFALSE [ GREATERP  10.5  11   ]

   ; make sure GREATER? is the same as GREATERP
   FAILIFNOTFALSE [ GREATER?   1    1   ]
   FAILIFNOTFALSE [ GREATER?   0    1   ]
   FAILIFNOTTRUE  [ GREATER?   1    0   ]
   FAILIFNOTFALSE [ GREATER?  -1    0   ]
   FAILIFNOTTRUE  [ GREATER?  -5   -10  ]
   FAILIFNOTFALSE [ GREATER?  1.1   1.2 ]
   FAILIFNOTTRUE  [ GREATER? -1.1  -1.2 ]

   ; make sure > is the same as GREATERP
   FAILIFNOTFALSE [ 1    >   1  ]
   FAILIFNOTFALSE [ 0    >   1  ]
   FAILIFNOTTRUE  [ 1    >   0  ]
   FAILIFNOTFALSE [ -1   >   0  ]
   FAILIFNOTTRUE  [ -5   > -10  ]
   FAILIFNOTFALSE [ 1.1  >  1.2 ]
   FAILIFNOTTRUE  [ -1.1 > -1.2 ]

END


TO GREATERPTEST.BADINPUT

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(GREATERP 1)]
   RUNTOOMANYINPUTSTEST   [(GREATERP 1 2 3)]

   ; first input is bad
   RUNDOESNTLIKEINPUTTEST [GREATERP "one 2 ]
   RUNDOESNTLIKEINPUTTEST [GREATERP [1]  2 ]
   RUNDOESNTLIKEINPUTTEST [GREATERP []   2 ]
   RUNDOESNTLIKEINPUTTEST [GREATERP {1}  2 ]

   ; second input is bad
   RUNDOESNTLIKEINPUTTEST [GREATERP 2 "one ]
   RUNDOESNTLIKEINPUTTEST [GREATERP 2 [1]  ]
   RUNDOESNTLIKEINPUTTEST [GREATERP 2 []   ]
   RUNDOESNTLIKEINPUTTEST [GREATERP 2 {1}  ]

END

TO GREATERPTEST
   GREATERPTEST.SMOKETEST
   GREATERPTEST.BADINPUT
END



TO GREATEREQUALPTEST.SMOKETEST

   ; whole numbers
   FAILIFNOTTRUE  [ GREATEREQUALP   1    1   ]
   FAILIFNOTFALSE [ GREATEREQUALP   0    1   ]
   FAILIFNOTTRUE  [ GREATEREQUALP   1    0   ]
   FAILIFNOTTRUE  [ GREATEREQUALP   0    0   ]

   ; floating-point numbers
   FAILIFNOTTRUE  [ GREATEREQUALP   1.5    1.5 ]
   FAILIFNOTFALSE [ GREATEREQUALP   0.5    1.5 ]
   FAILIFNOTTRUE  [ GREATEREQUALP   1.5    0.5 ]

   ; negative numbers
   FAILIFNOTTRUE  [ GREATEREQUALP   -1     -2 ]
   FAILIFNOTFALSE [ GREATEREQUALP   -2     -1 ]

   ; floating point and whole numbers
   FAILIFNOTFALSE [ GREATEREQUALP  10    10.5 ]
   FAILIFNOTTRUE  [ GREATEREQUALP  10     9.5 ]
   FAILIFNOTTRUE  [ GREATEREQUALP  10.5  10   ]
   FAILIFNOTFALSE [ GREATEREQUALP  10.5  11   ]

   ; make sure GREATEREQUAL? is the same as GREATEREQUALP
   FAILIFNOTTRUE  [ GREATEREQUAL?   1    1   ]
   FAILIFNOTFALSE [ GREATEREQUAL?   0    1   ]
   FAILIFNOTTRUE  [ GREATEREQUAL?   1    0   ]
   FAILIFNOTFALSE [ GREATEREQUAL?  -1    0   ]
   FAILIFNOTTRUE  [ GREATEREQUAL?  -5   -10  ]
   FAILIFNOTFALSE [ GREATEREQUAL?  1.1   1.2 ]
   FAILIFNOTTRUE  [ GREATEREQUAL? -1.1  -1.2 ]

   ; make sure >= is the same as GREATEREQUALP
   FAILIFNOTTRUE  [ 1    >=   1  ]
   FAILIFNOTFALSE [ 0    >=   1  ]
   FAILIFNOTTRUE  [ 1    >=   0  ]
   FAILIFNOTFALSE [ -1   >=   0  ]
   FAILIFNOTTRUE  [ -5   >= -10  ]
   FAILIFNOTFALSE [ 1.1  >=  1.2 ]
   FAILIFNOTTRUE  [ -1.1 >= -1.2 ]

END


TO GREATEREQUALPTEST.BADINPUT

   ; different number of inputs
   RUNNOTENOUGHINPUTSTEST [(GREATEREQUALP 1)]
   RUNTOOMANYINPUTSTEST   [(GREATEREQUALP 1 2 3)]

   ; first input is bad
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP "one 2 ]
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP [1]  2 ]
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP []   2 ]
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP {1}  2 ]

   ; second input is bad
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP 2 "one ]
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP 2 [1]  ]
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP 2 []   ]
   RUNDOESNTLIKEINPUTTEST [GREATEREQUALP 2 {1}  ]

END

TO GREATEREQUALPTEST
   GREATEREQUALPTEST.SMOKETEST
   GREATEREQUALPTEST.BADINPUT
END


TO MATHTEST

   SUMTEST
   DIFFERENCETEST
   MINUSTEST
   PRODUCTTEST
   QUOTIENTTEST
   REMAINDERTEST
   MODULOTEST

   INTTEST
   ROUNDTEST
   ABSTEST
   SIGNTEST

   SQRTTEST
   POWERTEST
   EXPTEST
   LOG10TEST
   LNTEST

   PITEST
   GOLDENRATIOTEST

   TANTEST
   RADTANTEST
   ARCTANTEST
   RADARCTANTEST

   SINTEST
   RADSINTEST
   ARCSINTEST
   RADARCSINTEST

   COSTEST
   RADCOSTEST
   ARCCOSTEST
   RADARCCOSTEST

   BUG80TEST

   LESSPTEST
   LESSEQUALPTEST
   GREATERPTEST
   GREATEREQUALPTEST
END

